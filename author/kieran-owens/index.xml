<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kieran Owens | heykieran Code Notes</title>
    <link>https://heykieran.github.io/author/kieran-owens/</link>
      <atom:link href="https://heykieran.github.io/author/kieran-owens/index.xml" rel="self" type="application/rss+xml" />
    <description>Kieran Owens</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© Kieran J. Owens 2020</copyright><lastBuildDate>Thu, 07 May 2020 11:26:15 -0400</lastBuildDate>
    <image>
      <url>https://heykieran.github.io/author/kieran-owens/avatar_hu52a603635ecebd45650b162dadabb4e5_12861_270x270_fill_q90_lanczos_center.jpg</url>
      <title>Kieran Owens</title>
      <link>https://heykieran.github.io/author/kieran-owens/</link>
    </image>
    
    <item>
      <title>Clojure Configurations with Docker Secrets</title>
      <link>https://heykieran.github.io/post/clojure-configuration/</link>
      <pubDate>Thu, 07 May 2020 11:26:15 -0400</pubDate>
      <guid>https://heykieran.github.io/post/clojure-configuration/</guid>
      <description>&lt;h1 id=&#34;passing-a-configuration-to-a-clojure-application&#34;&gt;Passing a &amp;ldquo;Configuration&amp;rdquo; to a Clojure Application&lt;/h1&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;There are many ways to pass configuration values to a Clojure application. This piece will cover four of them:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;#using-command-line-parameters&#34;&gt;Command Line Parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#using-environment-variables&#34;&gt;Environment Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#using-dynamic-environment-variables&#34;&gt;Dynamic Environment Variables&lt;/a&gt;, and&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#using-docker-secrets---with-dynamic-environment-variables&#34;&gt;Docker Secrets&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first two are briefly discussed, while greater time is spent on the final two. Of the four, the 
&lt;a href=&#34;#our-example-with-secrets&#34;&gt;last&lt;/a&gt; is particularly useful to keep &lt;strong&gt;secure&lt;/strong&gt; configuration values that &lt;strong&gt;ought&lt;/strong&gt; to be kept so - passwords, private keys etc.&lt;/p&gt;
&lt;h3 id=&#34;using-command-line-parameters&#34;&gt;Using Command Line Parameters&lt;/h3&gt;
&lt;p&gt;If one starts Clojure from the command line using the &lt;code&gt;-m&lt;/code&gt; option specifying a namespace, Clojure will execute the &lt;code&gt;-main&lt;/code&gt; function from that namespace, passing any further arguments on the command line as parameters to &lt;code&gt;-main&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, the following Clojure code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Clojure&#34;&gt;(ns main.core)

(defn -main [args]
  (println args))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which can be executed from the command line using&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ clj -m main.core &amp;quot;Hello World!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;will result in the string &lt;code&gt;Hello World!&lt;/code&gt; being printed to the console.&lt;/p&gt;
&lt;h3 id=&#34;using-environment-variables&#34;&gt;Using Environment Variables&lt;/h3&gt;
&lt;p&gt;As an alternative to command line parameters, it&amp;rsquo;s often convenient to have your Clojure application read its parameters from the application&amp;rsquo;s execution environment i.e. environment variables or JVM system properties.&lt;/p&gt;
&lt;p&gt;So running&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ export MYARGS=&amp;quot;Hello World!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;at the command line, and changing the &lt;code&gt;-main&lt;/code&gt; function to&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Clojure&#34;&gt;(defn -main [&amp;amp; args]
  (println (System/getenv &amp;quot;MYARGS&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you can now run the application using&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ clj -m main.core
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and see the same result.&lt;/p&gt;
&lt;p&gt;The value of the &lt;code&gt;MYARGS&lt;/code&gt; environment variable is read from the environment and then printed to the console.&lt;/p&gt;
&lt;p&gt;Unfortunately, as convenient as this is when executing the code, it can be a little inconvenient during development. If this is the only place you use the variable there&amp;rsquo;s little lost, but if the value is used in other areas of your application e.g. in other namespaces, any changes to its name or expected type will lead to an amount of error-prone &amp;ldquo;code surgery&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Also, &lt;code&gt;env&lt;/code&gt; variables are, by their nature, strings; so if you need the value as, for instance, an &lt;code&gt;int&lt;/code&gt; you&amp;rsquo;ll need to perform the casting and error-checking at the time of initialization.&lt;/p&gt;
&lt;h3 id=&#34;using-dynamic-environment-variables&#34;&gt;Using &amp;ldquo;Dynamic&amp;rdquo; Environment Variables&lt;/h3&gt;
&lt;p&gt;WalmartLabs have published a Clojure library on 
&lt;a href=&#34;https://github.com/walmartlabs/dyn-edn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt; to address many of these issues. The library centralizes the reading of &lt;code&gt;env&lt;/code&gt; variables, and also allows for existence-checking, the setting of default values, merging with JVM system properties, casting, type-checking, and composition.&lt;/p&gt;
&lt;p&gt;The library makes it possible to define in a simple &lt;code&gt;edn&lt;/code&gt; file the &lt;em&gt;shape&lt;/em&gt; of your configuration data and have it parsed correctly from the environment (and other locations) into the structure you want.&lt;/p&gt;
&lt;p&gt;As an example, if you have a file called &lt;code&gt;config.edn&lt;/code&gt; somewhere on your classpath with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-edn&#34;&gt;{:app-configuration
 {:myargs #dyn/prop MYARGS}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and change the &lt;code&gt;main/core.clj&lt;/code&gt; file to&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Clojure&#34;&gt;(ns main.core
  (:require
   [clojure.edn :as edn]
   [clojure.java.io :as io]
   [com.walmartlabs.dyn-edn :refer [env-readers]]))

(def app-config
  (-&amp;gt;&amp;gt; &amp;quot;config.edn&amp;quot;
     io/resource
     slurp
     (edn/read-string {:readers (env-readers)})))

(defn -main [&amp;amp; args]
  (println (get-in app-config [:app-configuration :myargs])))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then run the application using&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ clj -m main.core
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&amp;rsquo;ll see the same result - but, the application&amp;rsquo;s configuration has been correctly (and automatically) parsed into a configuration structure and is available as a map named &lt;code&gt;main.core/app-config&lt;/code&gt; that can be used throughout your application.&lt;/p&gt;
&lt;p&gt;The use of the &lt;code&gt;config.edn&lt;/code&gt; file also allows you to view the expected configuration parameters, or add to them, or change their default values in one central location - &lt;strong&gt;very&lt;/strong&gt; convenient.&lt;/p&gt;
&lt;h3 id=&#34;using-docker-secrets---with-dynamic-environment-variables&#34;&gt;Using Docker Secrets - with Dynamic Environment Variables&lt;/h3&gt;
&lt;p&gt;An area where &lt;code&gt;env&lt;/code&gt; variables are extensively used as configuration parameters is when an application is being run inside a docker container. By providing one or more &lt;code&gt;-e&lt;/code&gt; options to the &lt;code&gt;docker run&lt;/code&gt; command, it&amp;rsquo;s possible to establish the configuration environment for the application (if that&amp;rsquo;s where the application expects to find it).&lt;/p&gt;
&lt;p&gt;Unfortunately, certain configuration parameters contain sensitive information, such as passwords or private keys and one can&amp;rsquo;t realistically embed those values in the application&amp;rsquo;s code. They may change frequently; they may need to differ from one container to another; and their very existence in the code represents a risk that they&amp;rsquo;ll &amp;ldquo;leak&amp;rdquo; into an SCM.&lt;/p&gt;
&lt;p&gt;Of course, the use of environment variables is a good alternative to embedded code values, but represents a different, albeit smaller, set of risks. Anyone with access to the docker instance could recover the environment variables passed to a container during initialization.&lt;/p&gt;
&lt;p&gt;In order to address this, Docker introduced the concept of &lt;strong&gt;secrets&lt;/strong&gt; with docker &lt;strong&gt;swarm&lt;/strong&gt;. Secrets allow sensitive information to be defined securely, and then selectively made available to containers which are running as docker services. It is only within the running container that the secret&amp;rsquo;s value is available as contents of files mounted from an &lt;em&gt;in-memory&lt;/em&gt; filesystem, by default at &lt;code&gt;/run/secrets/&amp;lt;secret_name&amp;gt;&lt;/code&gt;, where they can be accessed by the application.&lt;/p&gt;
&lt;p&gt;In order to tie together environment variables with secrets, I&amp;rsquo;ve submitted a PR to the maintainer of the &lt;code&gt;walmart-labs/dyn-edn&lt;/code&gt; library which, in addition to &lt;code&gt;env&lt;/code&gt; variables and system properties, &lt;em&gt;merges in&lt;/em&gt; docker secrets to the set of variable available to the library&amp;rsquo;s readers: &lt;code&gt;#dyn/prop&lt;/code&gt;, &lt;code&gt;#dyn/join&lt;/code&gt;, &lt;code&gt;#dyn/long&lt;/code&gt;, &lt;code&gt;#dyn/boolean&lt;/code&gt;, and &lt;code&gt;#dyn/keyword&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;
The PR was accepted by the maintainer, but the library hasn&amp;rsquo;t yet made it to clojars. In order to use the secrets functionality you&amp;rsquo;ll need to add the following to your &lt;code&gt;:deps&lt;/code&gt; entry in &lt;code&gt;deps.edn&lt;/code&gt;. This will pull the appropriate version of the code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;com.walmartlabs/dyn-edn 
  {:git/url &amp;quot;https://github.com/walmartlabs/dyn-edn.git&amp;quot;
   :sha &amp;quot;855a775959cf1bec531a303a323e6f05f7b260fb&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;our-example-with-secrets&#34;&gt;Our Example with Secrets&lt;/h4&gt;
&lt;p&gt;To use a docker secret in lieu of the &lt;code&gt;MYARGS&lt;/code&gt; env variable used in previous examples all one needs to do is create a secret called &lt;code&gt;MYARGS&lt;/code&gt; with the appropriate value&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ printf &amp;quot;Hello World!&amp;quot; | docker secret create MYARGS -
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and, when starting the container as a docker service, authorize the service to use that secret&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker service create --replicas 1 --secret MYARGS --name &amp;lt;svcname&amp;gt; &amp;lt;image containing the app&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No change needs to be made to the &lt;code&gt;config.edn&lt;/code&gt; file, or to the source code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pedestal API, ClojureScript SPA and Google Authentication</title>
      <link>https://heykieran.github.io/post/pedestal-and-google/</link>
      <pubDate>Mon, 27 Apr 2020 11:53:08 -0400</pubDate>
      <guid>https://heykieran.github.io/post/pedestal-and-google/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The following are some notes about a 
&lt;a href=&#34;https://github.com/heykieran/clj-pedestal-google&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;repository&lt;/a&gt;
containing working code (extracted from a larger project) demonstrating a
combination of a secured &lt;strong&gt;Pedestal&lt;/strong&gt; website (and associated API services), and
a &lt;strong&gt;React&lt;/strong&gt;-ive ClojureScript front-end application that utilizes either Google
or bespoke login logic to identify and validate the user&amp;rsquo;s credentials, and sets
his/her authorization levels.&lt;/p&gt;
&lt;p&gt;I hope that it may be helpful to anyone else who may know how each of the the
individual pieces work, but is wondering how to put it all together.&lt;/p&gt;
&lt;p&gt;I owe a debt of gratitude to Tristan Straub, as much of the front-end logic (and
code) to utilize Google&amp;rsquo;s login is based on some code he posted on

&lt;a href=&#34;https://github.com/tristanstraub/cljs-google-signin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt;. I&amp;rsquo;ve changed the
code in many ways, so any errors are not his but mine.&lt;/p&gt;
&lt;p&gt;The front-end application, which is intentionally simple, allows a user to
login, and according to his/her permissions will allow access to various
resources. The application is written using React/ReFrame, Semantic UI React and
ClojureScript. The application uses Figwheel-main to compile and, in development
mode run the front-end; but switching to a different tool-chain (e.g.
shadow-cljs) should be relatively easy.&lt;/p&gt;
&lt;h1 id=&#34;features&#34;&gt;Features&lt;/h1&gt;
&lt;h3 id=&#34;google-login-integration-and-mapping-to-application-id&#34;&gt;Google Login Integration (and mapping to application id)&lt;/h3&gt;
&lt;p&gt;The application demonstrates how to integrate Google&amp;rsquo;s login
functionality with a ClojureScript application. After successfully
authenticating with Google, the user&amp;rsquo;s Google &lt;em&gt;email&lt;/em&gt; address is
associated with one (and only one) internal application user ID. The
internal user ID is associated internally with one or more application
defined roles, which are defined in the code.&lt;/p&gt;
&lt;p&gt;Conceivably, this &lt;em&gt;mapping&lt;/em&gt; of external ID to internal ID could allow
multiple external authentication services to be used to map multiple
externally asserted identities to a single internal user ID. For
example, by extending the application to use Facebook&amp;rsquo;s authentication
service, it would be possible to have both &lt;code&gt;user@gmail.com&lt;/code&gt; and
&lt;code&gt;user@facebook.com&lt;/code&gt; to be mapped to the same internal user ID, e.g.
&lt;code&gt;:user&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Fundamentally, authenticating and logging in merely associates a user
with a web session. The session is the operative object and identities
are not, and cannot be shared between sessions. A user may have multiple
sessions open, but they don&amp;rsquo;t &amp;ldquo;&lt;em&gt;mingle&lt;/em&gt;&amp;quot;.&lt;/p&gt;
&lt;h3 id=&#34;ad-hoc-_affirmative_-login-method&#34;&gt;Ad-hoc &lt;em&gt;affirmative&lt;/em&gt; login method&lt;/h3&gt;
&lt;p&gt;The application as presented allows a user to simply assert that they
are a known user. The only reason this feature is included is to
simplify debugging. In a production application these assertions would
typically be replaced with an application specific logon process.&lt;/p&gt;
&lt;h3 id=&#34;isolation-of-sensitive-information-from-codebase&#34;&gt;Isolation of sensitive information from codebase&lt;/h3&gt;
&lt;p&gt;In order to run Pedestal/Jetty (for production) or Figwheel/Jetty (for
development) with https (required to use Google login) the location of a
keystore and its password must be supplied.&lt;/p&gt;
&lt;p&gt;This is an obvious security concern - including any sensitive information in
either the source-code, or the application&amp;rsquo;s generated js code is poor security
hygiene. The application avoids this by using environment variable (assumed to
be available) to store this information which is read-only at runtime.&lt;/p&gt;
&lt;h3 id=&#34;secured-api-end-points-by-role-membership&#34;&gt;Secured API end-points by role membership&lt;/h3&gt;
&lt;p&gt;The application uses role-based security, where access to resources (URI&amp;rsquo;s) is
permitted or prohibited according to whether a user has membership within a
particular role. A user ID can be associated with one or more roles. Roles are
independent of one another. There is no concept of hierarchy or inheritance
beyond how the code chooses to handle these concepts.&lt;/p&gt;
&lt;p&gt;The application, for our purposes, defines three roles: &lt;code&gt;:admin&lt;/code&gt;,
&lt;code&gt;:user&lt;/code&gt; and &lt;code&gt;:public&lt;/code&gt;. An unauthenticated user is associated with the
role &lt;code&gt;:public&lt;/code&gt;. Note that there is nothing privileged about these roles,
or their names. They are completely application defined.&lt;/p&gt;
&lt;p&gt;In the code for the application&amp;rsquo;s configuration file
(&lt;code&gt;common-src/config/config.cljc&lt;/code&gt;) you can see how these have been
defined:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(def roles-and-users
  {:admin {:roles #{:admin} 
           :users #{&amp;quot;admin@timpsongray.com&amp;quot; &amp;quot;heykieran@gmail.com&amp;quot;}}
   :user {:roles #{:user} 
          :users #{&amp;quot;user@timpsongray.com&amp;quot;}}})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we&amp;rsquo;ve defined two users &lt;code&gt;:user&lt;/code&gt; and &lt;code&gt;:admin&lt;/code&gt;, along with two
roles, also called &lt;code&gt;:user&lt;/code&gt; and &lt;code&gt;:admin&lt;/code&gt;. Users who authenticated with
the email addresses &lt;code&gt;admin@timpsongray.com&lt;/code&gt; and &lt;code&gt;heykieran@gmail.com&lt;/code&gt;
will be associated with the user ID &lt;code&gt;:admin&lt;/code&gt;, and the user with the
email address &lt;code&gt;user@timpsongray.com&lt;/code&gt; will be associated with the user ID
&lt;code&gt;:user&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If we examine how routes are defined in the file
&lt;code&gt;server/be_handler_pdstl.clj&lt;/code&gt; we can see how security is applied to
URL&amp;rsquo;s.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(def routes
  (route/expand-routes
    #{[&amp;quot;/echo&amp;quot;  :get echo]
      [&amp;quot;/auth/isauthenticated&amp;quot; :post (build-secured-route-vec-to app-auth/get-current-logged-in-user) :route-name :alloc-public/is-authenticated]
      [&amp;quot;/auth/setid&amp;quot; :post (build-secured-route-vec-to app-auth/alloc-auth-explicitly-set-identity-of-user-post) :route-name :alloc-public/auth-set-id-post]
      [&amp;quot;/auth/google&amp;quot; :post (build-secured-route-vec-to app-auth/alloc-auth-google-login) :route-name :alloc-public/google-login-post]
      [&amp;quot;/auth/logout&amp;quot; :post (build-secured-route-vec-to disconnect-session) :route-name :alloc-user/auth-logout-post]
      [&amp;quot;/api/getsecresource/p&amp;quot; :post (build-secured-route-vec-to get-secured-resource) :route-name :alloc-public/test-res]
      [&amp;quot;/api/getsecresource/u&amp;quot; :post (build-secured-route-vec-to get-secured-resource) :route-name :alloc-user/test-res]
      [&amp;quot;/api/getsecresource/a&amp;quot; :post (build-secured-route-vec-to get-secured-resource) :route-name :test-res]
      [&amp;quot;/r/home&amp;quot; :get [content-neg-intc respond-with-app-page] :route-name :app-main-page]}))

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The current implementation uses the namespace of values
of each route&amp;rsquo;s &lt;code&gt;:route-name&lt;/code&gt; key to assign security.&lt;/p&gt;
&lt;p&gt;Any protected URL whose &lt;code&gt;:route-name&lt;/code&gt; namespace is &lt;code&gt;:alloc-public&lt;/code&gt; is
available to any user, authenticated or not.&lt;/p&gt;
&lt;p&gt;Any protected URL whose &lt;code&gt;:route-name&lt;/code&gt; namespace is &lt;code&gt;:alloc-user&lt;/code&gt; is
available to any user associated with the &lt;code&gt;:user&lt;/code&gt; role.&lt;/p&gt;
&lt;p&gt;Any protected URL whose &lt;code&gt;:route-name&lt;/code&gt; namespace is &lt;strong&gt;either&lt;/strong&gt;
&lt;code&gt;:alloc-admin&lt;/code&gt; or the default namespace is available to only users
associated with the &lt;code&gt;:admin&lt;/code&gt; role.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;URL&amp;rsquo;s are only &lt;em&gt;protected&lt;/em&gt; if they use the auth interceptors. These
interceptors are included when the function
&lt;code&gt;build-secured-route-vec-to&lt;/code&gt; is used to wrap the content handler
function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Another item to note is the three test URL&amp;rsquo;s &lt;code&gt;/api/getsecresource/p&lt;/code&gt;
(available to all users), &lt;code&gt;/api/getsecresource/u&lt;/code&gt; (available to users in
the &lt;code&gt;:user&lt;/code&gt; role) and &lt;code&gt;/api/getsecresource/a&lt;/code&gt; (available only to users
in the &lt;code&gt;:admin&lt;/code&gt; role) use the same handler &lt;code&gt;get-secured-resource&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;development-server--production-server&#34;&gt;Development Server &amp;amp; Production Server&lt;/h3&gt;
&lt;p&gt;The application has both a &lt;em&gt;development&lt;/em&gt; mode and a &lt;em&gt;production&lt;/em&gt; mode. Both
modes use Pedestal as the API server, responding to requests as defined
in the &lt;code&gt;routes&lt;/code&gt; parameter used to start the server. The difference
between the two modes is in how the js files are served, and in how
front-end development proceeds, or not.&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;development&lt;/em&gt; mode the application&amp;rsquo;s js files are served from a handler
(&lt;code&gt;fe-src/server/fe-handler&lt;/code&gt;) sitting behind figwheel/Jetty, and started
using the script provided in &lt;code&gt;scripts/server.clj&lt;/code&gt;. This facilitates the
&lt;em&gt;standard&lt;/em&gt; figwheel development process of having figwheel monitor a set
of source directories and regenerate and reload any changed files as
necessary. This should be familiar to anyone who&amp;rsquo;s used figwheel-main
for ClojureScript development. An alias has been defined in the
&lt;code&gt;deps.edn&lt;/code&gt; file to start all the various servers and to start figwheel.&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;production&lt;/em&gt; mode, the js files are served from the Pedestal/Jetty
server itself. Of course, in order to do this the js files must have
been previously compiled by figwheel. An alias has been defined in the
&lt;code&gt;deps.edn&lt;/code&gt; file for this purpose.&lt;/p&gt;
&lt;h3 id=&#34;log-out-functionality&#34;&gt;Log-out Functionality&lt;/h3&gt;
&lt;p&gt;The application allows the user to disassociate their session from their
identity. Because the session is the operative object, this is
essentially logging out.&lt;/p&gt;
&lt;h3 id=&#34;session-expiration&#34;&gt;Session Expiration&lt;/h3&gt;
&lt;p&gt;When credentials are issued for an authenticated user and associated
with a session, the information will also contain an expiration date. If
a user attempts to access a protected resource and the credentials are
found to have expired, access is denied and the user&amp;rsquo;s credentials are
disassociated from the session. This essentially logs that user out and
he/she will need to reassociate their credentials with the session.&lt;/p&gt;
&lt;h3 id=&#34;reactreagentreframekee-frame-application&#34;&gt;React/Reagent/Reframe/kee-frame Application&lt;/h3&gt;
&lt;p&gt;The test application is a reactive application written in ClojureScript
using reagent, reframe and kee-frame. It illustrates some of the
principles required for a simple application of this type.&lt;/p&gt;
&lt;h3 id=&#34;semantic-ui-integration&#34;&gt;Semantic UI Integration&lt;/h3&gt;
&lt;p&gt;The toolkit used for widgets and styling is 
&lt;a href=&#34;https://react.semantic-ui.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SemanticUI-react&lt;/a&gt;, and the
application illustrates how the library can be used.&lt;/p&gt;
&lt;h1 id=&#34;running-the-servers--applications&#34;&gt;Running the Servers &amp;amp; Applications&lt;/h1&gt;
&lt;h3 id=&#34;setting-up-a-keystore-for-https&#34;&gt;Setting up a keystore for HTTPS&lt;/h3&gt;
&lt;p&gt;In order to run the web servers in secured mode you&amp;rsquo;ll need to create a
keystore for the certificates used by the servers and make it available
to Jetty. Instructions on how to do this can be found

&lt;a href=&#34;https://heykieran.github.io/post/pedestal-jetty-https/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;setting-up-google-login&#34;&gt;Setting up Google Login&lt;/h3&gt;
&lt;p&gt;In order to use the application for yourself you will need to get your
own Google Client ID. Instructions on how to do this can be found

&lt;a href=&#34;https://developers.google.com/identity/sign-in/web/sign-in&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You will also need to use the Google Console to inform Google of the
&lt;strong&gt;Authorized Javascript Origins&lt;/strong&gt; associated with your Client ID. These
should be the names and ports of your https endpoints. For testing,
these will typically be the server name and port of your Pedestal/Jetty
and your figwheel/Jetty (for development mode only) servers.&lt;/p&gt;
&lt;p&gt;The values should also be set in the following places&lt;/p&gt;
&lt;p&gt;In your environment the following variables should be set&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Environment Variable&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ALLOC_KEYSTORE_PASSWORD&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The keystore&amp;rsquo;s password&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ALLOC_KEYSTORE_LOCATION&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The keystore&amp;rsquo;s filesystem location&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ALLOC_SSL_PORT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The ssl port number used for Pedestal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ALLOC_PORT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The port number used for Pedestal&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In the &lt;code&gt;common-src/config/config.cljc&lt;/code&gt; you will need to set the following
variables&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Configuration Variable&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;google-client-id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;your Google Client ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;my-hostname&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;your server&amp;rsquo;s name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;figwheel-ssl-port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the port used by figwheel&amp;rsquo;s https server and serving the application&amp;rsquo;s js files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pedestal-port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Pedestal&amp;rsquo;s HTTP port number (should match &lt;code&gt;ALLOC_PORT&lt;/code&gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pedestal-ssl-port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Pedestal&amp;rsquo;s HTTPS port number (should match &lt;code&gt;ALLOC_SSL_PORT&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;google-callback-url&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;change the server name in this variable to match your server&amp;rsquo;s name.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In the file &lt;code&gt;dev.cljs.edn&lt;/code&gt; change the &lt;code&gt;:open-url&lt;/code&gt; parameter to match your
server&amp;rsquo;s name, and the ssl port used by figwheel. This should match
&lt;code&gt;https://&amp;lt;my-hostname&amp;gt;:&amp;lt;pedestal-ssl-port&amp;gt;/r/home&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;starting-the-servers&#34;&gt;Starting the Server(s)&lt;/h3&gt;
&lt;h4 id=&#34;development-mode&#34;&gt;Development Mode&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In your IDE of choice, start a REPL (with the alias &lt;code&gt;:main&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Load and execute the &lt;code&gt;control&lt;/code&gt; namespace&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execute the function &lt;code&gt;(start-dev)&lt;/code&gt; (It&amp;rsquo;s within a &lt;code&gt;comment&lt;/code&gt; expression).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Log messages are sent to the REPL output stream, so you can monitor
progress and activity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the Pedestal server has started, run the following from a command line&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;clj -A:dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will start the front-end server used by figwheel on ports 9500 and
&lt;code&gt;figwheel-ssl-port&lt;/code&gt; and will start the figwheel watch process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your browser should automatically open to
&lt;code&gt;https://&amp;lt;my-hostname&amp;gt;:&amp;lt;figwheel-ssl-port&amp;gt;/r/home&lt;/code&gt; where the application
will be loaded. (You should have set this in &lt;code&gt;dev.cljs.edn&lt;/code&gt; as above).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    When you&amp;rsquo;re finished and wish to stop the front-end server: from the Figwheel console you issue the &lt;code&gt;:cljs/quit&lt;/code&gt; command to stop the Figwheel build process followed by Ctrl+C to stop the front-end server itself.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;production-mode&#34;&gt;Production Mode&lt;/h4&gt;
&lt;p&gt;Build the production application by running&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;clj -A:prod
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;from the command line. This will generate the production js files from your ClojureScript sources. Then, from the command line run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;clj -A:main -m control
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will start the Pedestal server which in addition to serving API requests will also serve the js files built in the last step.&lt;/p&gt;
&lt;p&gt;Finally, open your browser and navigate to &lt;code&gt;https://&amp;lt;my-hostname&amp;gt;:8081/r/home&lt;/code&gt; to display the application&amp;rsquo;s Home page.&lt;/p&gt;
&lt;h2 id=&#34;navigating-the-application&#34;&gt;Navigating the Application&lt;/h2&gt;
&lt;h3 id=&#34;the-home-page&#34;&gt;The Home Page&lt;/h3&gt;
&lt;p&gt;When the application first starts, you can go to the Home page&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-the-initial-view-of-the-home-page-no-logged-in-user&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/home-page_huaaba3d4bf3897864ad8c0dbe2950fa00_42345_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;The initial view of the home page (no logged-in user).&#34;&gt;


  &lt;img data-src=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/home-page_huaaba3d4bf3897864ad8c0dbe2950fa00_42345_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1338&#34; height=&#34;352&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    The initial view of the home page (&lt;strong&gt;no&lt;/strong&gt; logged-in user).
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;the-applications-menu&#34;&gt;The Application&amp;rsquo;s Menu&lt;/h3&gt;
&lt;p&gt;The application is a SPA with client-side routing and has only a single menu with 5 menu items.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-the-main-menu-no-logged-in-user&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/home-page-menu-no-logged-in-user_hufd402a6ba5fecc72c633474ae2fa3e3d_57047_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;The main menu (no logged-in user).&#34;&gt;


  &lt;img data-src=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/home-page-menu-no-logged-in-user_hufd402a6ba5fecc72c633474ae2fa3e3d_57047_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1338&#34; height=&#34;674&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    The main menu (&lt;strong&gt;no&lt;/strong&gt; logged-in user).
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;strong&gt;Home&lt;/strong&gt; item will take you to the Home page&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Users&lt;/strong&gt; menu item will display the application&amp;rsquo;s Sign-In/Sign-Out page. Here you can connect an identity to your session (&lt;em&gt;log-in&lt;/em&gt;), or disconnect an identity from your session (&lt;em&gt;log-out&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Public&lt;/strong&gt; menu item will request content from an unsecured API endpoint whose content is available to any user whether authenticated or not.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;User&lt;/strong&gt; menu item will request content from an an API endpoint to which access has been restricted to users with &lt;strong&gt;role&lt;/strong&gt; memberships of &lt;code&gt;:admin&lt;/code&gt; or &lt;code&gt;:user&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Admin&lt;/strong&gt; menu item will request content from an an API endpoint to which access has been restricted to users with &lt;strong&gt;role&lt;/strong&gt; membership of &lt;code&gt;:admin&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;access-a-public-resource&#34;&gt;Access a Public Resource&lt;/h3&gt;
&lt;p&gt;Even though you have not yet signed in, if you click on the &lt;strong&gt;Public&lt;/strong&gt; menu item the application will respond with some content.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-access-to-public-resource-is-allowed-no-logged-in-user&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/access-public-resource_huf6a3c9ebea043d4f5d4e6b23eba4a1b4_41499_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Access to Public Resource is allowed (no logged-in user).&#34;&gt;


  &lt;img data-src=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/access-public-resource_huf6a3c9ebea043d4f5d4e6b23eba4a1b4_41499_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1340&#34; height=&#34;418&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Access to Public Resource is allowed (&lt;strong&gt;no&lt;/strong&gt; logged-in user).
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;This is as expected as that resource is unsecured and available to anyone who can access the application.&lt;/p&gt;
&lt;h3 id=&#34;sign-in-as-the-localuser-user&#34;&gt;Sign-In as the &lt;code&gt;:local/:user&lt;/code&gt; User&lt;/h3&gt;
&lt;p&gt;On the Sign-In Page, click on the button labelled &lt;strong&gt;&lt;a href=&#34;mailto:user@timpsongray.com&#34;&gt;user@timpsongray.com&lt;/a&gt;&lt;/strong&gt;. This will associate you session with the application user &lt;code&gt;:user&lt;/code&gt;, who has been assigned the &lt;code&gt;:user&lt;/code&gt; &lt;strong&gt;role&lt;/strong&gt;. This form of sign-in is a &lt;code&gt;:local&lt;/code&gt; authority sign-in. The authority is granted by the application itself.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-the-standard-sign-in-page-no-logged-in-user&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/sign-in-page_hu08d58e743afadb57a341d72a72bfa387_91827_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;The Standard Sign-In Page (no logged-in user).&#34;&gt;


  &lt;img data-src=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/sign-in-page_hu08d58e743afadb57a341d72a72bfa387_91827_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1336&#34; height=&#34;868&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    The Standard Sign-In Page (&lt;strong&gt;no&lt;/strong&gt; logged-in user).
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Once you&amp;rsquo;ve done that you&amp;rsquo;ll be redirected to the &lt;strong&gt;Home&lt;/strong&gt; page where your session and identity details are displayed.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-after-the-user-user-has-signed-in&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/user-user-signed-in_hu88471979aee3312eae8537ac4b138fbe_46032_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;After the user :user has signed in.&#34;&gt;


  &lt;img data-src=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/user-user-signed-in_hu88471979aee3312eae8537ac4b138fbe_46032_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1340&#34; height=&#34;372&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    After the user &lt;code&gt;:user&lt;/code&gt; has signed in.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;accessing-a-protected-resource&#34;&gt;Accessing a protected resource&lt;/h3&gt;
&lt;p&gt;Now click on the &lt;strong&gt;User&lt;/strong&gt; menu item. The application will attempt to fetch a resource from an API endpoint restricted to users in the &lt;code&gt;:user&lt;/code&gt; or &lt;code&gt;:admin&lt;/code&gt; roles.&lt;/p&gt;
&lt;p&gt;Because &lt;code&gt;:user&lt;/code&gt; has that role association the contents of the resource is displayed.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-the-user-user-is-allowed-to-access-to-the-user-resource&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/user-accesses-user-page-ok_hua77f555305a4e482c429b34566c4f1b6_45163_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;The user (:user) is allowed to access to the User resource.&#34;&gt;


  &lt;img data-src=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/user-accesses-user-page-ok_hua77f555305a4e482c429b34566c4f1b6_45163_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1344&#34; height=&#34;426&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    The user (&lt;code&gt;:user&lt;/code&gt;) is allowed to access to the &lt;strong&gt;User&lt;/strong&gt; resource.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;However, if you now click on the &lt;strong&gt;Admin&lt;/strong&gt; menu item, which attempts to fetch
data from an API endpoint restricted to &lt;code&gt;:admin&lt;/code&gt; role members only, you&amp;rsquo;ll see
an access denied message.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-the-user-user-is-denied-access-to-the-admin-resource&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/user-accesses-admin-page-denied_hu8fda4bc3b88839b1d49961b5d15e137b_125581_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;The user (:user) is denied access to the Admin resource.&#34;&gt;


  &lt;img data-src=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/user-accesses-admin-page-denied_hu8fda4bc3b88839b1d49961b5d15e137b_125581_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1334&#34; height=&#34;592&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    The user (&lt;code&gt;:user&lt;/code&gt;) is denied access to the &lt;strong&gt;Admin&lt;/strong&gt; resource.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;sign-out-from-user&#34;&gt;Sign-Out from &lt;code&gt;:user&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Click on the &lt;strong&gt;Users&lt;/strong&gt; menu item to go to the Sign-In/Sign-Out page&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-a-view-of-the-standard-sign-out-page-with-user-user-is-logged-in&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/local-user-sign-out_hu5288488acb08e3af3122c648af377573_121592_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;A view of the standard Sign-Out page with user (:user) is logged in.&#34;&gt;


  &lt;img data-src=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/local-user-sign-out_hu5288488acb08e3af3122c648af377573_121592_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1334&#34; height=&#34;1170&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    A view of the standard Sign-Out page with user (&lt;code&gt;:user&lt;/code&gt;) is logged in.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;and at the bottom click on the button in &lt;strong&gt;Sign-Out (Local)&lt;/strong&gt; section. This will remove the identity information from your session, and return you to the Home page.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-returned-to-home-page-after-user-signs-out&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/home-page_huaaba3d4bf3897864ad8c0dbe2950fa00_42345_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Returned to Home Page after user signs out.&#34;&gt;


  &lt;img data-src=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/home-page_huaaba3d4bf3897864ad8c0dbe2950fa00_42345_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1338&#34; height=&#34;352&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Returned to Home Page after user signs out.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;sign-in-as-a-google-user&#34;&gt;Sign in as a Google User&lt;/h3&gt;
&lt;p&gt;Again, click on the &lt;strong&gt;Users&lt;/strong&gt; menu item to go to the Sign-In/Sign-Out page&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-the-standard-sign-in-page&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/sign-in-page_hu08d58e743afadb57a341d72a72bfa387_91827_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;The Standard Sign-In Page.&#34;&gt;


  &lt;img data-src=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/sign-in-page_hu08d58e743afadb57a341d72a72bfa387_91827_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1336&#34; height=&#34;868&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    The Standard Sign-In Page.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;This time however click on the Google &lt;strong&gt;Sign in&lt;/strong&gt; button. This will open the familiar Google Sign-In dialog where you can login with your Google identity. If the email address of the Google user is registered with an application user ID your session will assigned that identity, but the &lt;code&gt;:authority&lt;/code&gt; will now be &lt;code&gt;:google&lt;/code&gt;, indicating that is the entity making the assertion of identity.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-the-google-sign-in-dialog&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/google-login-dialog_hu00c65657a65268155e33b18fe1910fb9_72909_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;The Google Sign-In Dialog.&#34;&gt;


  &lt;img data-src=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/google-login-dialog_hu00c65657a65268155e33b18fe1910fb9_72909_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1178&#34; height=&#34;712&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    The Google Sign-In Dialog.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Again, you&amp;rsquo;ll be returned to the Home page where the session&amp;rsquo;s identity information is displayed.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-the-home-page-with-google-signed-in-user&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/google-user-login-home_hu0f008ac669061a5310176bfbdabf1530_48835_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;The Home Page with Google signed-in user.&#34;&gt;


  &lt;img data-src=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/google-user-login-home_hu0f008ac669061a5310176bfbdabf1530_48835_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1478&#34; height=&#34;352&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    The Home Page with Google signed-in user.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Because &lt;strong&gt;&lt;a href=&#34;mailto:heykieran@gmail.com&#34;&gt;heykieran@gmail.com&lt;/a&gt;&lt;/strong&gt; is an alias for the user &lt;code&gt;:admin&lt;/code&gt;, that is the ID displayed in the top-right corner of the page, and consequently access to the API endpoints restricted to users in the &lt;code&gt;:admin&lt;/code&gt; role will be allowed.&lt;/p&gt;
&lt;h3 id=&#34;signing-out&#34;&gt;Signing Out&lt;/h3&gt;
&lt;p&gt;If you click on the &lt;strong&gt;Users&lt;/strong&gt; menu item you can return to the Sign-In/Sign-Out page to disconnect your session from the Google account using the &lt;strong&gt;Sign Out&lt;/strong&gt; button. This disconnects your application session, but does &lt;strong&gt;not&lt;/strong&gt; log you out from Google.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-the-users-page-with-a-signed-in-google-user-mapped-to-application-id-admin&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/google-user-sign-out-page_hua45813ca70e13bb9a469ee5545a5e2d9_106661_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;The Users page with a Signed-In Google user (mapped to application ID :admin).&#34;&gt;


  &lt;img data-src=&#34;https://heykieran.github.io/post/pedestal-and-google/static/img/google-user-sign-out-page_hua45813ca70e13bb9a469ee5545a5e2d9_106661_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1340&#34; height=&#34;908&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    The Users page with a Signed-In Google user (mapped to application ID &lt;code&gt;:admin&lt;/code&gt;).
  &lt;/figcaption&gt;


&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Cadence Workflow and Clojure</title>
      <link>https://heykieran.github.io/post/cadence-and-clojure/</link>
      <pubDate>Wed, 22 Apr 2020 11:10:38 -0400</pubDate>
      <guid>https://heykieran.github.io/post/cadence-and-clojure/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    A repository with some working code and implementation notes can be found &lt;a href=&#34;https://github.com/heykieran/cadence-test&#34;&gt;here&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I had the occasion recently to investigate, and cursorily evaluate, a number of workflow
orchestration systems for use on a project with which I was involved. One of those systems,

&lt;a href=&#34;https://cadenceworkflow.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Cadence&lt;/strong&gt;&lt;/a&gt;, particularly appealed to me - there was something very &lt;em&gt;Clojuresque&lt;/em&gt; about it;
certainly something very suggestive of a functional language.&lt;/p&gt;
&lt;p&gt;It has the concept of state &lt;em&gt;durability&lt;/em&gt; (in workflow functions) that bears more than a passing
resemblance to the persistent data structures of Clojure - but extended across time. This
concept, similar to checkpoints, opens avenues to consistent, predictable restarts after
failures. If one can restore the complete state of a system to a known &lt;em&gt;good-state&lt;/em&gt; then one can
continue as if the failure had never occurred. Of course, if system-wide (or even better,
distributed) non-volatile RAM ever becomes a reality then Cadence would not be needed. This
strikes me as essence of the problem Cadence is attempting to solve, or, at least, the gap it&amp;rsquo;s
attempting to bridge. Cadence also allows, through activities, the use of non-persistent
data structures which can be considered as being analogous to the concept of a &lt;em&gt;side-effect&lt;/em&gt; in Clojure.&lt;/p&gt;
&lt;p&gt;The separation of the &lt;em&gt;functional&lt;/em&gt; from the &lt;em&gt;side-effect&lt;/em&gt;-ing, and the elision of
infrastructure and communication failure concerns leaves developers with simpler, almost always
more tractable, domain logic concerns and significantly reduces the cognitive load.
This is similar to the benefits often realized through the adoption of functional languages.&lt;/p&gt;
&lt;h2 id=&#34;a-brief-tour-to-cadence&#34;&gt;A Brief Tour to Cadence&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://cadenceworkflow.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cadence&lt;/a&gt; is a workflow automation system developed by Uber. It shares many features
with other workflow automation systems but differs by being uniquely
&lt;em&gt;fault-oblivious&lt;/em&gt; rather than merely &lt;em&gt;fault-tolerant&lt;/em&gt;. The approach adopted by Cadence simplifies
greatly the work of developers who are relieved of many of the burdens of coordinating
activities and recovering from system or service failure.&lt;/p&gt;
&lt;p&gt;Cadence is complex but three concepts core to its understanding are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Cadence Service itself,&lt;/li&gt;
&lt;li&gt;Workflow Workers and&lt;/li&gt;
&lt;li&gt;Activity Workers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Cadence service, backed by a persistent data-store such as Cassandra or MySql, is responsible for
orchestrating the activities of both type of workers, for maintaining history, and in the case of failure,
for recovering the state of all workflows (but not activities).&lt;/p&gt;
&lt;p&gt;Conceptually, the Cadence service instructs a Workflow Worker to execute a Workflow function. The Workflow function,
which implements business logic, is guaranteed by Cadence to be &lt;em&gt;durable&lt;/em&gt;. That is, its state, including its
thread stack and thread-local variables, are known and stored by Cadence, and in the case of failure
they are restored.&lt;/p&gt;
&lt;p&gt;Workflows, like the business processes they typically model, may be long-running. It&amp;rsquo;s not unusual for a
real-world business process to take days or even months to complete, and Cadence provides excellent facilities
to support such long-running processes within workflow functions. Therefore, the durability of the workflow functions (with the guaranteed
recovery of their states across failures) enables a simple &lt;em&gt;straight-line&lt;/em&gt; view of the business logic. This
greatly reduces the complexity of the development process by reducing the burden on the developer to anticipate
and mitigate &lt;strong&gt;all&lt;/strong&gt; failure modes.&lt;/p&gt;
&lt;p&gt;In order to be able to guarantee durability across failures Cadence places a number of
restrictions on the code in Workflow functions. The code must be &lt;em&gt;deterministic&lt;/em&gt; i.e. executing the code
must produce the same result no matter how often it is run. Therefore, certain actions are forbidden within
workflow code - examples being: interacting &lt;strong&gt;directly&lt;/strong&gt; with external services, getting the time, getting random values,
and creating or suspending threads.&lt;/p&gt;
&lt;p&gt;These type of actions are fundamentally non-deterministic and would make full recovery of the workflow state impossible.
However, the Cadence API provides alternatives for &lt;strong&gt;some&lt;/strong&gt; of these that produce deterministic behavior; and
which assure the recoverability of the function&amp;rsquo;s local variables, threads and state.&lt;/p&gt;
&lt;p&gt;For situations requiring interaction with external services (&lt;em&gt;the outside world&lt;/em&gt;), Cadence insists
that all communication be conducted through Activities, using Activity Workers. Activities do not share with Workflows
any of Cadence&amp;rsquo;s requirement that they be deterministic. Essentially anything is allowed in activities and any
clean-up after failure becomes the responsibility of the developer rather than the Cadence service.&lt;/p&gt;
&lt;p&gt;Conceptually, &lt;em&gt;(but not precisely)&lt;/em&gt;, a Workflow Worker will start an Activity Worker (or multiple Activity Workers) to interact with the
outside world. Examples of an Activity might be interacting with a web-service, getting or saving a record to
a database, or awaiting human input, such as a decision. Cadence offers no guarantees about activity state,
and that state is not recovered in the case of failures of the Cadence infrastructure i.e. within the Cadence service itself.&lt;/p&gt;
&lt;p&gt;In order to control a running workflow, or to affect its state, it can be signalled using events delivered by Cadence.&lt;/p&gt;
&lt;h2 id=&#34;cadence--clojure-challenges&#34;&gt;Cadence &amp;amp; Clojure Challenges&lt;/h2&gt;
&lt;p&gt;The signature of the worker registration function is &lt;code&gt;registerWorkflowImplementationTypes(java.lang.Class&amp;lt;?&amp;gt;... workflowImplementationClasses)&lt;/code&gt;
and in the documentation there is the note&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The reason for registration accepting workflow class, but not the workflow instance is that workflows are stateful and a new instance is created for each workflow execution.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What&amp;rsquo;s not noted, but implied, is that the constructor for the classes must have zero-arg constructors. This is problematic
for Clojure as instance variable declared in &lt;code&gt;deftype&lt;/code&gt; will create on constructor taking exactly that number of instance variables as
arguments.&lt;/p&gt;
&lt;p&gt;You might then consider inheritance of the &lt;code&gt;deftype&lt;/code&gt;-d class to workaround the zero arg constructor issue
leaving a cleaner, more Clojure-esque result.&lt;/p&gt;
&lt;p&gt;However, although &lt;code&gt;deftype&lt;/code&gt; can create a Java class with the fields you need, by default these fields are immutable;
but you could use &lt;code&gt;:volatile-mutable&lt;/code&gt; to allow the fields to be settable. Unfortunately, the bigger problem
is that the generated class is &lt;code&gt;public final&lt;/code&gt; which effectively eliminates the possibility that we
could use the class as a base class in &lt;code&gt;gen-class&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This might have been helpful as we could define a zero-args constructor in &lt;code&gt;gen-class&lt;/code&gt; and then using the &lt;code&gt;:constructors&lt;/code&gt;
field map that constructor to the base class constructor and then assign default values to the field in the &lt;code&gt;:init&lt;/code&gt; method.
The fact that the &lt;code&gt;deftype&lt;/code&gt;-ed class is &lt;code&gt;final&lt;/code&gt; eliminates that approach.&lt;/p&gt;
&lt;h2 id=&#34;working-cadence--clojure-code&#34;&gt;Working Cadence &amp;amp; Clojure Code&lt;/h2&gt;
&lt;p&gt;In order to fully investigate using Clojure with Cadence I developed a small set of demos to demonstrate how it works,
works around what doesn&amp;rsquo;t, and exercises the result. &lt;strong&gt;Very&lt;/strong&gt; little consideration was given to making the code more idiomatic,
at least from a Clojure perspective, or even particularly effective. I only making the 
&lt;a href=&#34;https://github.com/heykieran/cadence-test&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;repository&lt;/a&gt;
available as it may prove helpful to others who would like to use Clojure with Cadence.&lt;/p&gt;
&lt;p&gt;The repository also contains further notes on the implementation and lessons learnt.&lt;/p&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s Next?&lt;/h2&gt;
&lt;p&gt;As time allows I&amp;rsquo;ll probably return to the code, making it more idiomatic. But do let me know if you find it helpful, or share
your suggestions for improvement.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting-up Pedestal/Jetty with HTTPS</title>
      <link>https://heykieran.github.io/post/pedestal-jetty-https/</link>
      <pubDate>Fri, 17 Apr 2020 13:39:37 -0400</pubDate>
      <guid>https://heykieran.github.io/post/pedestal-jetty-https/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Setting up Pedestal (using Jetty) with HTTPS isn&amp;rsquo;t that difficult, but
it is a bit &amp;ldquo;fiddly&amp;rdquo;. Essentially, you&amp;rsquo;ll need a keystore so that Jetty has
access to encryption keys and can encrypt pages sent over HTTPS.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post only deals with self-signed certificates, but if you want to use
commercially-signed certificates it should work too.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Just be aware that Jetty is happiest with the &lt;code&gt;pkcs12&lt;/code&gt; format - I&amp;rsquo;ve never got it to work satisfactorily
using other formats.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Service Map (Pedestal)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In order to run Jetty under Pedestal you&amp;rsquo;ll need to supply a service map. The following service map works for me. You can change it as you need. The important elements in the
current context are where Jetty should look for the keystore (&lt;code&gt;keystore-location&lt;/code&gt;),
the &lt;code&gt;:ssl?&lt;/code&gt; key, the &lt;code&gt;:ssl-port&lt;/code&gt; and the &lt;code&gt;:security-provider&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Make sure the provider (Conscrypt) is in your &lt;code&gt;deps.edn&lt;/code&gt; file&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
(def service-map
  (let
    [keystore-location
     (if (System/getenv &amp;quot;KEYSTORE_LOCATION&amp;quot;)
       (-&amp;gt; (io/file (System/getenv &amp;quot;KEYSTORE_LOCATION&amp;quot;))
           (.getCanonicalPath))
       &amp;quot;/home/user/security/jetty-keystore&amp;quot;)]
    {::http/host &amp;quot;0.0.0.0&amp;quot;
     ::http/allowed-origins
                 {:allowed-origins (fn[_] true)
                  :creds true}
     ::http/routes #(deref #&#39;routes)
     ::http/type   :jetty
     ::http/container-options
     {:context-configurator jetty-websocket-configurator
      :h2c? true
      :h2 true
      :ssl? true
      :ssl-port 8081
      :keystore keystore-location
      :key-password &amp;quot;thepassword&amp;quot;
      :security-provider &amp;quot;Conscrypt&amp;quot;}
     ::http/port 8080}))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Jetty Keystore&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In order for Pedestal to start with Jetty,
it expects to find a keystore in a particular location
(see &lt;em&gt;Service Map&lt;/em&gt; notes above).&lt;/p&gt;
&lt;p&gt;To create the keystore (I&amp;rsquo;ve plagiarized/assembled from the following
pieces of information web, and I&amp;rsquo;m afraid I can&amp;rsquo;t remember the source(s).)&lt;/p&gt;
&lt;p&gt;Generate a private site key (&lt;code&gt;site.key&lt;/code&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openssl genrsa -des3 -out site.key 2048
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make a copy of &lt;code&gt;site.key&lt;/code&gt; and strip the password, so that it can be auto-loaded&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cp site.key site.orig.key
$ openssl rsa -in site.orig.key -out site.key
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Generate a self-signed signing request (&lt;code&gt;site.csr&lt;/code&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openssl req -new -key site.key -out site.csr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Generate a self-signed certificate (&lt;code&gt;sitex509.crt&lt;/code&gt; - in &lt;strong&gt;x509&lt;/strong&gt; format for loading into the keystore)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openssl req -new -x509 -key site.key -out sitex509.crt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Combine the self-signed certificate (&lt;code&gt;sitex509.crt&lt;/code&gt;) and site key (&lt;code&gt;site.key&lt;/code&gt;) and
export it in &lt;strong&gt;pkcs12&lt;/strong&gt; format (&lt;code&gt;site.pkcs12&lt;/code&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openssl pkcs12 -inkey site.key -in sitex509.crt -export -out site.pkcs12
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rename the keystore (&lt;code&gt;site.pkcs12&lt;/code&gt;) to jetty-keystore&lt;/p&gt;
&lt;p&gt;and adjust the service-map to use it&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
