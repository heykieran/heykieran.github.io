[{"authors":["heykieran"],"categories":null,"content":"Kieran Owens is the CTO of Timpson Gray\n","date":1587145177,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1587145177,"objectID":"1b59167ee93fdb1982478d476b8e75dd","permalink":"https://heykieran.github.io/author/kieran-owens/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/kieran-owens/","section":"authors","summary":"Kieran Owens is the CTO of Timpson Gray","tags":null,"title":"Kieran Owens","type":"authors"},{"authors":["admin"],"categories":null,"content":"Nelson Bighetti is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://heykieran.github.io/author/nelson-bighetti/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/nelson-bighetti/","section":"authors","summary":"Nelson Bighetti is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.","tags":null,"title":"Nelson Bighetti","type":"authors"},{"authors":["Kieran Owens"],"categories":["Blog Post"],"content":"Introduction\nSetting up Pedestal (using Jetty) with HTTPS isn\u0026rsquo;t that difficult, but it is a bit \u0026ldquo;fiddly\u0026rdquo;. Essentially, you\u0026rsquo;ll need a keystore so that Jetty has access to encryption keys and can encrypt pages sent over HTTPS.\nThis post only deals with self-signed certificates, but if you want to use commercially-signed certificates it should work too.\n Just be aware that Jetty is happiest with the pkcs12 format - I\u0026rsquo;ve never got it to work satisfactorily using other formats.   Service Map (Pedestal)\nIn order to run Jetty under Pedestal you\u0026rsquo;ll need to supply a service map. The following service map works for me. You can change it as you need. The important elements in the current context are where Jetty should look for the keystore (keystore-location), the :ssl? key, the :ssl-port and the :security-provider.\nMake sure the provider (Conscrypt) is in your deps.edn file\n (def service-map (let [keystore-location (if (System/getenv \u0026quot;KEYSTORE_LOCATION\u0026quot;) (-\u0026gt; (io/file (System/getenv \u0026quot;KEYSTORE_LOCATION\u0026quot;)) (.getCanonicalPath)) \u0026quot;/home/user/security/jetty-keystore\u0026quot;)] {::http/host \u0026quot;0.0.0.0\u0026quot; ::http/allowed-origins {:allowed-origins (fn[_] true) :creds true} ::http/routes #(deref #'routes) ::http/type :jetty ::http/container-options {:context-configurator jetty-websocket-configurator :h2c? true :h2 true :ssl? true :ssl-port 8081 :keystore keystore-location :key-password \u0026quot;thepassword\u0026quot; :security-provider \u0026quot;Conscrypt\u0026quot;} ::http/port 8080}))  Jetty Keystore\nIn order for Pedestal to start with Jetty, it expects to find a keystore in a particular location (see Service Map notes above).\nTo create the keystore (I\u0026rsquo;ve plagiarized/assembled from the following pieces of information web, and I\u0026rsquo;m afraid I can\u0026rsquo;t remember the source(s).)\nGenerate a private site key (site.key)\n$ openssl genrsa -des3 -out site.key 2048  Make a copy of site.key and strip the password, so that it can be auto-loaded\n$ cp site.key site.orig.key $ openssl rsa -in site.orig.key -out site.key  Generate a self-signed signing request (site.csr)\n$ openssl req -new -key site.key -out site.csr  Generate a self-signed certificate (sitex509.crt - in x509 format for loading into the keystore)\n$ openssl req -new -x509 -key site.key -out sitex509.crt  Combine the self-signed certificate (sitex509.crt) and site key (site.key) and export it in pkcs12 format (site.pkcs12)\n$ openssl pkcs12 -inkey site.key -in sitex509.crt -export -out site.pkcs12  Rename the keystore (site.pkcs12) to jetty-keystore\nand adjust the service-map to use it\n","date":1587145177,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587145177,"objectID":"caa521ff1fb0576fd01e59f1ba4c95e2","permalink":"https://heykieran.github.io/post/pedestal-jetty-https/","publishdate":"2020-04-17T13:39:37-04:00","relpermalink":"/post/pedestal-jetty-https/","section":"post","summary":"Introduction\nSetting up Pedestal (using Jetty) with HTTPS isn\u0026rsquo;t that difficult, but it is a bit \u0026ldquo;fiddly\u0026rdquo;. Essentially, you\u0026rsquo;ll need a keystore so that Jetty has access to encryption keys and can encrypt pages sent over HTTPS.","tags":["clojure","pedestal","https"],"title":"Setting-up Pedestal/Jetty with HTTPS","type":"post"}]